import{_ as s,c as a,o as n,a as l}from"./app.1b85acd6.js";const o="/assets/eventloop.427bdeac.png",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"短路 与 (&&) 或 (||)","slug":"短路-与-或","link":"#短路-与-或","children":[{"level":3,"title":"短路","slug":"短路","link":"#短路","children":[]},{"level":3,"title":"短路与或运算中的 false","slug":"短路与或运算中的-false","link":"#短路与或运算中的-false","children":[]},{"level":3,"title":"返回","slug":"返回","link":"#返回","children":[]},{"level":3,"title":"练习","slug":"练习","link":"#练习","children":[]}]},{"level":2,"title":"js 中的 trick","slug":"js-中的-trick","link":"#js-中的-trick","children":[{"level":3,"title":"+","slug":"","link":"#","children":[]},{"level":3,"title":"==","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"!!","slug":"-2","link":"#-2","children":[]}]},{"level":2,"title":"microtask（task） 和 macrotask","slug":"microtask-task-和-macrotask","link":"#microtask-task-和-macrotask","children":[]},{"level":2,"title":"递归","slug":"递归","link":"#递归","children":[]},{"level":2,"title":"slice 和 splice","slug":"slice-和-splice","link":"#slice-和-splice","children":[]}],"relativePath":"javascript/index.md"}'),p={name:"javascript/index.md"},e=l(`<h2 id="短路-与-或" tabindex="-1">短路 与 (<code>&amp;&amp;</code>) 或 (<code>||</code>) <a class="header-anchor" href="#短路-与-或" aria-hidden="true">#</a></h2><h3 id="短路" tabindex="-1">短路 <a class="header-anchor" href="#短路" aria-hidden="true">#</a></h3><p>短路的意思是左边执行后能知道结果就不执行右边。</p><p>如果是 <code>||</code>，左边如果是 <code>true</code>， 则右边不会执行。 例如：</p><ul><li><code>2 == 1 + 1 || console.log(&#39;执行&#39;)</code></li><li><code>1 == 1 + 1 || console.log(&#39;执行&#39;)</code></li></ul><p>如果是 <code>&amp;&amp;</code>, 如果左边是 <code>false</code>，则右边不会执行。例如：</p><ul><li><code>2 == 1 + 1 &amp;&amp; console.log(&#39;执行&#39;)</code></li><li><code>1 == 1 + 1 &amp;&amp; console.log(&#39;执行&#39;)</code></li></ul><p>下面两端代码意义相同：</p><ul><li><code>step &gt; max_step &amp;&amp; (step = min_step);</code></li><li><code>if (step &gt; max_step) step = min_step;</code></li></ul><h3 id="短路与或运算中的-false" tabindex="-1">短路与或运算中的 <code>false</code> <a class="header-anchor" href="#短路与或运算中的-false" aria-hidden="true">#</a></h3><p><code>&quot;&quot;</code>，<code>false</code>，<code>0</code>，<code>null</code>，<code>undefined</code>，<code>NaN</code> 会被当成 <code>false</code> 处理。</p><p>其他的都是 <code>true</code>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>字符串 <code>&quot;false&quot;</code> 也会被当做 true 处理。</p></div><h3 id="返回" tabindex="-1">返回 <a class="header-anchor" href="#返回" aria-hidden="true">#</a></h3><p>js 的与或<strong>并不只是</strong>返回 <code>true</code> 和 <code>false</code> 的布尔值。</p><p><code>a || b</code>：如果 <strong>a</strong> 是<code>true</code>，那么 <strong>b</strong> 不管是<code>true</code>还是<code>false</code>，都返回<code>true</code>。因此不用判断 <strong>b</strong> 了，这个时候刚好判断 到 <strong>a</strong>，因此返回 <strong>a</strong>。</p><p>如果 <strong>a</strong> 是 <code>false</code>，那么就要判断 <strong>b</strong>，如果 <strong>b</strong> 是 true，那么返回<code>true</code>，如果 <strong>b</strong> 是<code>false</code>，返回<code>false</code>，其实不 就是返回 <strong>b</strong> 了吗。</p><p><code>a &amp;&amp; b</code>：如果 <strong>a</strong> 是 <code>false</code>，那么 <strong>b</strong> 不管是<code>true</code>还是<code>false</code>，都返回<code>false</code>，因此不用判断 <strong>b</strong> 了，这个时候刚好 判断到 <strong>a</strong>，因此返回 <strong>a</strong>。</p><p>如果 <strong>a</strong> 是 <code>true</code>，那么就要在判断 <strong>b</strong>，和刚刚一样，不管 <strong>b</strong> 是<code>true</code>是<code>false</code>，都返回 <strong>b</strong>。</p><h3 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-hidden="true">#</a></h3><p>尝试得出下面的返回结果：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NaN</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (b </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> c) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> (d </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> e))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 js 中 <code>&amp;&amp;</code> 运算符优先级大于 <code>||</code>。</p></div><h2 id="js-中的-trick" tabindex="-1">js 中的 trick <a class="header-anchor" href="#js-中的-trick" aria-hidden="true">#</a></h2><h3 id="" tabindex="-1"><code>+</code> <a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p>加法运算符（+）为两种不同的运算重载：数字加法和字符串连接。在求值时:</p><ol><li>首先将两个操作数<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="noreferrer">强制转换</a>为基本类型。</li><li>如果有一方是字符串，另一方则会被转换为字符串，并且它们连接起来。</li><li>如果双方都是 BigInt，则执行 BigInt 加法。如果一方是 BigInt 而另一方不是，会抛出 TypeError。</li><li>否则，双方都会被转换为数字，执行数字加法。</li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ab</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1,23</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="-1" tabindex="-1"><code>==</code> <a class="header-anchor" href="#-1" aria-hidden="true">#</a></h3><p><code>==</code> 会进行类型转换，<code>===</code> 不会。</p><h3 id="-2" tabindex="-1"><code>!!</code> <a class="header-anchor" href="#-2" aria-hidden="true">#</a></h3><p><code>!!</code> 会将值转换为布尔值。</p><h2 id="microtask-task-和-macrotask" tabindex="-1">microtask（task） 和 macrotask <a class="header-anchor" href="#microtask-task-和-macrotask" aria-hidden="true">#</a></h2><p><strong>macrotasks</strong>: setTimeout, setInterval, setImmediate, requestAnimationFrame, I/O, UI rendering</p><p><strong>microtasks</strong>: process.nextTick, Promises, queueMicrotask, MutationObserver</p><p><a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noreferrer">事件循环</a></p><p><img src="`+o+`" alt="事件循环"></p><p>在每个宏任务之后，引擎会立即执行微任务队列中的所有任务，然后再运行任何其他宏任务或渲染或其他任何任务。</p><p>需要注意的是，每个事件循环都有一个正在运行的宏任务，他要么是空，要么是任务。这个宏任务执行完毕后，会执行微任务队列中的所 有任务。微任务执行过程中，也可以添加新的微任务，继续运行，直到微任务队列清空。进入下一次事件循环，取下一个宏任务执行。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setTimeout 是宏任务, 在下一次事件循环中，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 如果宏任务队列中没有在其前面其他宏任务，则第一个执行</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在本次事件循环中，微任务是可以入队的，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 所以本次事件循环会清空所有微任务，promise 在本次事件循环就可执行</span></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ----- console ------</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// script start</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// promise1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// setTimeout1</span></span>
<span class="line"></span></code></pre></div><p>所以造成一种假象，就是微任务队列中的任务是比宏任务先执行。可以 看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout" target="_blank" rel="noreferrer">setTimeout</a>方法的 delay 参数。</p><p>或者可以这么理解，所有单个宏任务都视为一段程序的入口，执行完毕后，会立刻执行微任务队列中的所有任务，到微任务队列清空为止 。这一次的循环叫做一个事件循环。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>任务队列中的任务只有当调用栈是空的时候才会将任务 push 进调用栈中执行。</p></div><ul><li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noreferrer">视频</a></li><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noreferrer">可视化演示 1</a></li><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noreferrer">可视化演示 2</a></li></ul><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-hidden="true">#</a></h2><p>递归函数必须有一个终止条件，否则会无限递归。停止调用的条件叫做基线条件（base case）。</p><p><strong>1. 一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</strong></p><h4 id="第一步-明确递归关系-找规律" tabindex="-1">第一步：明确递归关系 （找规律） <a class="header-anchor" href="#第一步-明确递归关系-找规律" aria-hidden="true">#</a></h4><ul><li>如果只有 1 级台阶，那么只有 1 种跳法</li><li>如果有 2 级台阶，那么有 2 种跳法</li><li>如果有 3 级台阶，那么有 3 种跳法</li><li>如果有 4 级台阶，那么有 5 种跳法</li><li>如果有 5 级台阶，那么有 8 种跳法</li><li>...</li><li>如果有 n 级台阶，那么有 <code>f(n)=f(n-1)+f(n-2)</code> 种跳法</li></ul><p>脑瓜子聪明一下能想到，想不到就列出情况找规律。</p><p>青蛙是怎么到达第 n 级台阶的呢？</p><p>他可以从第 n-1 级台阶跳上来，也可以从第 n-2 级台阶跳。前面无论怎么跳，最后一跳不同，所以 <code>f(n)=f(n-1)+f(n-2)</code>。</p><h4 id="第二步-明确终止条件" tabindex="-1">第二步：明确终止条件 <a class="header-anchor" href="#第二步-明确终止条件" aria-hidden="true">#</a></h4><p>我们选择 <code>f(1)=1</code> 和 <code>f(2)=2</code> 作为终止条件。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jump</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">jump</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">jump</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><strong>二叉树的最大深度</strong></li></ol><h4 id="第一步-明确递归关系-找规律-1" tabindex="-1">第一步：明确递归关系 （找规律） <a class="header-anchor" href="#第一步-明确递归关系-找规律-1" aria-hidden="true">#</a></h4><p>二叉树的深度为左右子树深度的最大值加 1。</p><h4 id="第二步-明确终止条件-1" tabindex="-1">第二步：明确终止条件 <a class="header-anchor" href="#第二步-明确终止条件-1" aria-hidden="true">#</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">maxDepth</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">maxDepth</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">maxDepth</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="slice-和-splice" tabindex="-1">slice 和 splice <a class="header-anchor" href="#slice-和-splice" aria-hidden="true">#</a></h2><p><code>slice</code> 不会改变原数组。参数指定启始位置和结束位置，返回一个区间内的新数组，且不包括结束位置。[start, end)</p><p>数组从做到右，从 0 开始计数，如果是负数，则从右到左，从 -1 开始计数。</p><p><code>splice</code> 会改变原数组。很强大的数组方法，它有很多种用法，可以实现删除、插入和替换。</p><p>1）、删除元素,并返回删除的元素</p><p>可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， <code>splice(0,2)</code>会删除数组中的前两项。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [1, 2]</span></span>
<span class="line"></span></code></pre></div><p>2）、向指定索引处添加元素</p><p>可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，<code>splice(2,0,4,6)</code>会从当前数组的位置 2 开始插入 4 和 6。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [1, 2, 4, 6, 3, 4, 5]</span></span>
<span class="line"></span></code></pre></div><p>3）、替换指定索引位置的元素</p><p>可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，<code>splice (2,1,4,6)</code>会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [3]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [1, 2, 4, 6, 4, 5]</span></span>
<span class="line"></span></code></pre></div>`,73),t=[e];function c(r,i,y,F,D,C){return n(),a("div",null,t)}const h=s(p,[["render",c]]);export{A as __pageData,h as default};
