import{_ as s,c as e,o,a}from"./app.1b85acd6.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"抛出问题","slug":"抛出问题","link":"#抛出问题","children":[]},{"level":3,"title":"package.json 新扩展 - type","slug":"package-json-新扩展-type","link":"#package-json-新扩展-type","children":[]}],"relativePath":"typescript/nodeforesm/index.md"}'),n={name:"typescript/nodeforesm/index.md"},l=a(`<p>本文参考这篇<a href="https://www.typescriptlang.org/docs/handbook/esm-node.html" target="_blank" rel="noreferrer">文章</a>。</p><h3 id="抛出问题" tabindex="-1">抛出问题 <a class="header-anchor" href="#抛出问题" aria-hidden="true">#</a></h3><p>在 nodejs 中使用<a href="https://github.com/typicode/lowdb" target="_blank" rel="noreferrer">lowdb.js</a>时会 有<a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noreferrer">问题</a>。</p><p>lowdb 只支持 esmodule。</p><p>node 的生态是构建在 commonjs 之上的，所以很多库都是 commonjs 的。</p><p>Node.js 中对 ESM 的支持现已在 Node.js 中实现。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NodeNext</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 或 Node16</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这两个新模式带来了一些高级功能。</p><h3 id="package-json-新扩展-type" tabindex="-1">package.json 新扩展 - type <a class="header-anchor" href="#package-json-新扩展-type" aria-hidden="true">#</a></h3><p>此设置控制 <code>.js</code> 和 <code>.d.ts</code> 文件解释为 ES 模块或 CommonJS 模块</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &quot;type&quot;可以设置为&quot;module&quot;或&quot;commonjs&quot; (默认是&quot;commonjs&quot;)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>当设置为 &quot;module&quot; 时，</p><ul><li><code>import</code> / <code>export</code> 和 顶层 <code>await</code> 将可以使用</li><li><code>import</code> 的文件扩展名不可省略</li><li>imports might resolve differently from dependencies in node_modules</li><li>某些类似全局的值，如 <code>require()</code> 和 <code>__dirname</code> 不能直接使用</li><li>CommonJS modules get imported under certain special rules</li></ul>`,13),p=[l];function t(c,r,i,d,y,D){return o(),e("div",null,p)}const F=s(n,[["render",t]]);export{m as __pageData,F as default};
