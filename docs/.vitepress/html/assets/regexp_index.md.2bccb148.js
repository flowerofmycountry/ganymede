import{_ as e,c as s,o as t,a as n}from"./app.1b85acd6.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"元字符","slug":"元字符","link":"#元字符","children":[]},{"level":2,"title":"字符转义 \\\\","slug":"字符转义","link":"#字符转义","children":[]},{"level":2,"title":"字符集合 []","slug":"字符集合","link":"#字符集合","children":[]},{"level":2,"title":"重复","slug":"重复","link":"#重复","children":[]},{"level":2,"title":"分枝条件 |","slug":"分枝条件","link":"#分枝条件","children":[]},{"level":2,"title":"反义","slug":"反义","link":"#反义","children":[]},{"level":2,"title":"分组 ()","slug":"分组","link":"#分组","children":[]},{"level":2,"title":"向后引用","slug":"向后引用","link":"#向后引用","children":[]},{"level":2,"title":"回溯与性能","slug":"回溯与性能","link":"#回溯与性能","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"relativePath":"regexp/index.md"}'),o={name:"regexp/index.md"},l=n(`<h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配除换行符以外的任意字符</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">匹配字母或数字或下划线或汉字，不考虑汉字的话和 <code>[a-z0-9A-Z_]</code> 完全一致</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配任意的空白符</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配数字,和 <code>[0-9]</code> 完全一致</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配单词的开始或结束</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">匹配字符串的开始</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配字符串的结束</td></tr></tbody></table><p><code>\\b</code> 匹配一个单词边界，也就是指空格，标点符号或者换行的位置。例如，<code>er\\b</code> 可以匹配 <code>&quot;never&quot;</code> 中的 <code>&quot;er&quot;</code>，但不能匹配 <code>&quot;verb&quot;</code> 中的 <code>&quot;er&quot;</code>。</p><p>当 <code>^</code> 和 <code>$</code> 同时使用有完全匹配的意思。</p><p><code>/^\\d{5,12}$/</code> 表示以数字开头结尾的 5-12 位数字。</p><p><code>/\\d{5,12}/</code> 表示包含的 5-12 位数字。</p><h2 id="字符转义" tabindex="-1">字符转义 <code>\\</code> <a class="header-anchor" href="#字符转义" aria-hidden="true">#</a></h2><p>字符集合 <code>[]</code> 外，需要转义的有 <code>.</code>，<code>^</code>，<code>$</code>，<code>*</code>，<code>+</code>，<code>?</code>，<code>\\</code>，<code>{</code>，<code>}</code>，<code>(</code>，<code>)</code>，<code>[</code>，<code>]</code>，<code>|</code>。</p><p>字符集合 <code>[]</code> 内，需要转义的有 <code>^</code>。</p><h2 id="字符集合" tabindex="-1">字符集合 <code>[]</code> <a class="header-anchor" href="#字符集合" aria-hidden="true">#</a></h2><p>像 <code>[aeiou]</code> 就匹配任何一个英文元音字母，<code>[.?!]</code> 匹配标点符号( <code>.</code> 或 <code>?</code> 或 <code>!</code> )。</p><p><code>^</code> 在字符集合内有取反的意思。<code>[^aeiou]</code> 除了英文元音字母以外其他的任意字符。</p><h2 id="重复" tabindex="-1">重复 <a class="header-anchor" href="#重复" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">*</td><td style="text-align:center;">指定前边的内容重复零次或更多次</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">指定前边的内容重复一次或更多次</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">指定前边的内容重复零次或一次</td></tr><tr><td style="text-align:center;">{n}</td><td style="text-align:center;">指定前边的内容重复 n 次</td></tr><tr><td style="text-align:center;">{n,}</td><td style="text-align:center;">指定前边的内容重复 n 次或更多次</td></tr><tr><td style="text-align:center;">{n,m}</td><td style="text-align:center;">指定前边的内容重复 n 到 m 次</td></tr></tbody></table><h2 id="分枝条件" tabindex="-1">分枝条件 <code>|</code> <a class="header-anchor" href="#分枝条件" aria-hidden="true">#</a></h2><p>分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用 <code>|</code> 把不同的规则分隔开。</p><p><code>0\\d{2}-\\d{8}|0\\d{3}-\\d{7}</code> 这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8 位本地号(如 <code>010-12345678</code> )，一种是 4 位区号，7 位本地号( <code>0376-2233445</code> )。</p><h2 id="反义" tabindex="-1">反义 <a class="header-anchor" href="#反义" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:center;">代码</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配任意非数字的字符</td></tr><tr><td style="text-align:center;">\\B</td><td style="text-align:center;">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center;">[^x]</td><td style="text-align:center;">匹配除了 x 以外的任意字符</td></tr><tr><td style="text-align:center;">[^aeiou]</td><td style="text-align:center;">匹配除了 aeiou 这几个字母以外的任意字符</td></tr></tbody></table><h2 id="分组" tabindex="-1">分组 <code>()</code> <a class="header-anchor" href="#分组" aria-hidden="true">#</a></h2><p>想要重复多个字符可以用小括号来指定子表达式(也叫做分组)。</p><p><code>(\\d{1,3}\\.){3}\\d{1,3}</code> 是一个简单的 IP 地址匹配表达式。<code>192.168.1.1</code></p><h2 id="向后引用" tabindex="-1">向后引用 <a class="header-anchor" href="#向后引用" aria-hidden="true">#</a></h2><p>分组后的表达式会被自动编号，从 1 开始，第二个为 2，以此类推。后面想引用的话，用 <code>\\1</code> ，<code>\\2</code>，... 来表示。</p><p><code>\\b(\\w+)\\b\\s+\\1\\b</code> 可以用来匹配重复的单词，像 <code>go go</code>, 或者 <code>kitty kitty</code>。相当于 <code>\\b\\w+\\b\\s+\\w+\\b</code>。</p><p>也可以自己给分组命名。</p><h2 id="回溯与性能" tabindex="-1">回溯与性能 <a class="header-anchor" href="#回溯与性能" aria-hidden="true">#</a></h2><p>先看一个正则：<code>/^\\d+0$/.test(&quot;11110&quot;)</code>。</p><ol><li><code>\\d+</code> 匹配 <code>11110</code></li><li><code>0</code> 发现没有东西匹配，此时正则逻辑会<strong>回溯</strong>一位，<code>\\d+</code> 匹配 <code>1111</code>，留出一个 <code>0</code></li><li><code>0</code> 匹配 <code>0</code>，匹配结束。返回 <code>true</code>。</li></ol><p>上面的能明白，再看一个：<code>/^(\\d+)+$/.test(&quot;1111x&quot;)</code></p><ol><li><code>\\d+</code> - <code>1111x</code> 无法匹配，此时正则逻辑会<strong>回溯</strong>一位，<code>\\d+</code> 匹配 <code>1111</code>，留出一个 <code>x</code>。</li><li><code>\\d+</code> - <code>x</code> 无法匹配，此时正则逻辑会<strong>回溯</strong>一位，<code>\\d+</code> 匹配 <code>111</code>，留出一个 <code>1x</code>。</li><li><code>\\d+</code> - <code>1x</code>，看一下第一步，<code>1x</code> 是不是和 <code>1111x</code> 非常像，没错他会重复做之前的逻辑。</li><li>...... 整个过程就是一个大的递归。</li><li>不停<strong>回溯</strong>直到 <code>\\d+</code> 匹配 <code>1</code>，留出一个 <code>111x</code>。</li><li><code>\\d+</code> - <code>111x</code> 做递归匹配，最后无法满足，返回 <code>false</code>。</li></ol><p>由此可看出当 <code>1111x</code> 位数变多时，性能消耗成指数级递增。</p><p>下面的例子说明了正则优化的必要性：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> executeWithTimer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">start</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">end</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">程序运行时间为</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">end</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> start</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> ms</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">executeWithTimer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">regExp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">*</span><span style="color:#C3E88D;">\\s</span><span style="color:#89DDFF;">?)*</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">better</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">*</span><span style="color:#C3E88D;">\\s</span><span style="color:#89DDFF;">)*</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">*</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 优化后有效减少回溯</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1 12 123 1234 12345 123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1 12 123 1234 12345 12345x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1 12 123 1234 12345 123456 123456x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">正则表达式测试</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">regExp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(data3) </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">通过</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">失败</span><span style="color:#89DDFF;">&quot;}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-hidden="true">#</a></h2><ul><li><a href="https://www.jb51.net/tools/zhengze.html" target="_blank" rel="noreferrer">参考 1</a></li><li><a href="https://juejin.cn/post/6844903494906806279" target="_blank" rel="noreferrer">参考 2</a></li><li><a href="https://jex.im/regulex/#!flags=&amp;re=%5E(a%7Cb)*%3F%24" target="_blank" rel="noreferrer">可视化</a></li></ul>`,36),a=[l];function c(p,r,d,y,i,F){return t(),s("div",null,a)}const A=e(o,[["render",c]]);export{h as __pageData,A as default};
